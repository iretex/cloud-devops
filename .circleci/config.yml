# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # say-hello:
  #   # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
  #   docker:
  #     - image: cimg/base:stable
  #   # Add steps to the job
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#steps
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Say hello"
  #         command: "echo Hello, World!"

  save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    working_directory: /tmp

    steps:
      - run: mkdir -p workspace
      - run:
          name: "Say Hello"
          command: "echo hello world > workspace/output.txt"
      - persist_to_workspace:
          root: workspace
          paths:
            - output.txt
  
  print_output_file:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp/workspace

      - run: |
          if [[ `cat /tmp/workspace/output.txt` == "Hello, world!" ]]; then
            echo "It worked!";
          else
            echo "Nope!"; exit 1
          fi

      - run:
          name: Print Output File
          command: |
            cat output.txt
  print_world:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: "Say World"
          command: "echo World!"
      - run:
          name: "What is my Name?"
          command: echo ${MY_NAME}

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      # - say-hello
      # - print_hello
      # - print_world:
      #     requires: [print_hello]
      - save_hello_world_output
      - print_output_file
